Microsoft: DAT204x Introduction to R Programming:   
 ☐ Language of statistical computing
 ☐ Open source implementatoin of S language
 ☐ Open source and free
 ☐ Master of graphics
 ☐ command line interface
 ☐ Reproductability through R scripts
 ☐ R Package , extensions of R
 ☐ values are assign by the "<-" keyword
 ☐ ls() shows all available variable in workspace
 ☐ rm(var) removes the variable from the workspacetotal
 ☐ length(var) returns the length of the vector
 ☐ ^ is used to calculate to the power of, and %%  modulo
 ☐ class() to reveal type, is.*() is to check type, as.*() to coerce type
 ☐ specify a an 'interger' (whole number) by appending L behind the value a <- 23L
 ☐ vector
   ☐ c(), creates a vector and check type by is.vector()
   ☐ names(), with 2 vectors, 1 can be used as names reference for the other vector using names(model) <- cars
   ☐ can be done in single line (similar to enum in c#)
   ☐ can apply arithmetics  or logical operators, the introduced operand is applied to all elements 
     ☐ balance <- available - used
     ☐ has_balance <- available > used
   ☐ subsets, similar to arrays can be accessed by the index or the name used[1] or used["monday"]
   ☐ muliptle subsets can be retrieved by using the "c" function, remain_black <- remain[c(1, 4)]
   ☐ muliptle subsets can be removed from retrieval by using the minus operator, remain[-2] or remain_black <- remain[-c(1, 4)]
   ☐ Use ':' symbol to specify range selection in subsets
 ☐ Matrices
   ☐ Matrix are 2 dimensional where vector is 1 
   ☐ matrix(1:6, nrow = 2) or matrix(1:6, ncol = 3), value range from 1 to 6 (distributed by col) and 2 * 3 matrix)
   ☐ matrix(1:6, nrow = 2, byrow = TRUE), values are distributed by rows instead
   ☐ cbind() and rbind(), creates matrix and adds new vector to a matrix
   ☐ colnames(<target_matrix) <- c("value 1", "value 2"), this will assign labels for the columns
   ☐ rownames(<target_matrix) <- c("value 1", "value 2"), this will assign labels for the rows
   ☐ Examples #1:
       # Star Wars box office in millions (!)
       box <- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8)

        # Create star_wars_matrix
        star_wars_matrix <- matrix(box, byrow = TRUE, nrow = 3)
   ☐ Example #2:
     # Star Wars box office in millions (!)
      new_hope <- c(460.998, 314.4)
      empire_strikes <- c(290.475, 247.900)
      return_jedi <- c(309.306, 165.8)

      # Create star_wars_matrix
      star_wars_matrix <- rbind(new_hope, empire_strikes, return_jedi)
   ☐ rowSums can be used to get the sum of rows 
   ☐ example:
     # creating a matrix of 4 rows with existing vectors
     scores <- rbind(first_row, second_row, third_row, fourth_row)

     #creating a column for total score of each row and adding to the scores
     scores <- cbind(scores, rowSums(scores))

     #naming the matrix
     rownames(scores) <- c('row1', 'row2', 'row3', 'row4')
     colnames(scores) <- c('c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'total')
   ☐ subsetting matrix, 
     ☐ access by item[2,2], this will access the value at row 2 column 2
     ☐ access by item[2,], this will access  all elements in row 2 
     ☐ access by item[,2], this will access  all elements in col 2 
     ☐ access by item[2], this will access  second item by column count
   ☐ Multiple subset
     ☐ item[2, c(2,3)] , selects value at column 2 and 3 of row 2
     ☐ item[c(1,2), c(2,3)], returns value at column 2 and 3 of rows 1 and 2
     ☐ item[c(1,3), c(2,3,4)], returns value at column 2, 3 and 4 of rows 1 and 3
     ☐ Example:
        #combine sub matrix from 2 different matrices and store in another matrix

        #get rachels' rows from  view_count_1
                                  Mark Laurent Rachel Pierre
          A New Hope                 1       3      2      3
          The Empire Strikes Back    2       4      3      2
          Return of the Jedi         1       3      2      1
          The Phantom Menace         1       2      1      1
          Attack of the Clones       1       1      0      1
          Revenge of the Sith        0       1      0      0
        > filter_view_1 <- view_count_1[, "Rachel"]


        #get walter and dave 's rows from view_count_2
                                  Christel Walter Dave Monica
          A New Hope                     2      1    5      0
          The Empire Strikes Back        2      1    2      0
          Return of the Jedi             2      0    3      0
          The Phantom Menace             4      2    2      0
          Attack of the Clones           5      3    2      0
          Revenge of the Sith            4      1    3      1        
        > filter_view_2 <- view_count_2[, c("Walter", "Dave")]          

        #combine both
        > total_view_loud <- cbind(filter_view_1, filter_view_2)

   ☐ names subsetting is also possible, follow the same rule of subsetting
   ☐ subset with logical vector 
   ☐ Matrix Arithmetic
     ☐ colSums() takes the sum of each column and stores in a vector
     ☐ rowSums() takes the sum of each row and stores in a vector
 ☐ Factors
   ☐ Storing categories variables
   ☐ Factors are integer vectors
   ☐ Change factor level: levels() functions or label argument
   ☐ Ordered factors: ordered : TRUE
   ☐ Nominal vs. Ordinal
     ☐ Nominal has no implied order (values cannot be compared)
     ☐ We can enforce the order (see example)
   ☐ summary(), summarizes a factor
   ☐ Examples:

      #Example 1 : Blood types

        #blood vector containing blood type of 8 people
        blood <- c("B", "AB", "O", "A", "O", "O", "A", "B")

        #factor the vector
        blood_factor <- factor(blood)

        #will appear as 
        blood_factor
        [1] B AB O A O O A B
        Levels: A AB B O # levels are sorted alphabetically

        #inspect blood_factor structure
        str(blood_vector)

        #will give the result below, the numbers are the number encoded version of the level (for performance reasons)
        Factor w/ 4 levels "A", "AB", "B", "O": 3 2 4 1 4 4 1 3

        #Changing the order of the levels
        blood_factor2 <- factor(blood, levels = c("O", "A", "B", "AB") )

        #specifying the level names, must follow the order of the factor levels
        levels(blood_factor) <- c("BT_A", "BT_AB", "BT_B", "BT_O")

        #specifying levels and labels to avoid mistakenly giving wrong names to the levels
        factor(
          blood, 
          levels = c("O", "A", "B", "AB"),
          labels = c("BT_O", "BT_A", "BT_B", "BT_AB")
        )

        #applying order to the factor levels
        tshirt_factor <- factor(tshirt, ordered = TRUE, levels = c("S", "M", "L"))

        fly_class_factor <- factor(
          fly_class, 
          ordered = TRUE, 
          levels = c("eco", "bus", fir"), 
          labels = c("economy", "business", "first")
        ) 
 ☐ Lists
   ☐ Lists can contain different type of datatypes (different R objects)
   ☐ No coercion but loss of some functionality
   ☐ Creating
     ☐ c("Rsome times", 190, 5)
     ☐ list("Rsome times", 190, 5)
     ☐ song <- list("Rsome times", 190, 5)
     ☐ is.list(song), result: TRUE
   ☐ Named list
     ☐ #1
       ☐ song <- list("Rsome times", 190, 5)
       ☐ names(song) <- c("title", "duration", "track")
     ☐ #2
       ☐ song <- list(title = "Rsome Time", duration = 190, track = 5)
       ☐ str(song), lists formatted content
   ☐ List in List
     ☐ similar_songs <- list(title = "R you on time?", duration = 230)
     ☐ song <- list(title = "Rsome Time", duration = 190, track = 5, similar = similar_song)
     ☐ str(song)
     ☐ List of lists can also be in list
   ☐ Subset and extend list
     ☐ [[]] used to access element in a list
     ☐ song[[1]], will return "Rsome times"
     ☐ song [c(1,3)], will return a new list of "Rsome times" and 5
     ☐ song [[c(1,3)]] or song [[1]][[3]], will not work since it suppose to select a single element
     ☐ song[[4]][[1]] and song[[c(4,1)]], will return "R you on time?"
     ☐ subset by name, song[["duration"]], song[c("duration", "similar")]
     ☐ song[c(FALSE, TRUE, TRUE, FALSE)] will work
     ☐ song[[c(FALSE, TRUE, TRUE, FALSE)]] will not work
     ☐ $ and extending
       ☐ song$duration, returns 190
       ☐ song$sent <- c("Kurt", "Florence", "Patti", "Dave")
       ☐ song[["sent"]] <- c("Kurt", "Florence", "Patti", "Dave")
       ☐ song$similar$reason <- "too long" 
 ☐ Data Frames
   ☐ Specifically for datasets, it has rows and columns
     ☐ example, rows, has observations (persons) and columns store variables
     ☐ contains elements of different types
     ☐ element of same columns must be same type
     ☐ Creating a dataframe
       ☐ import from other source (csv, db, excel, etc)
       ☐ df <- data.frame (vector1, vector2, vector3)
       ☐ naming , names(df) <- c("Name", "Age", "Child")
     ☐ methods
       ☐ head(), tail(), dim(), str()
     ☐ Example :
        planets <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
        type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet", "Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
        diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
        rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
        rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)

        type_factor <- factor(type)
        planets_df <- data.frame(planets, type_factor, diameter, rotation, rings, stringsAsFactors = FALSE)
        str(planets_df)
        names(planets_df) <- c("name", "type", "diameter", "rotation", "has_rings")
        
   ☐ Subset, extend and sort
     ☐ selecting single value, similar like matrices: dataFrame[row_index, column_index] or dataFrame[row_index, "column_name"]
     ☐ selecting single row , similar like matrices: dataFrame[row_index, ] 
     ☐ selecting single column , similar like matrices: or dataFrame[, "column_name"] 
     ☐ selecting certain columsn of multiple rows, dataFrame[c(3,5), c("column_name", "column_name1")] 
     ☐ dataFrame$column_name, dataFrame[["column_name"]], dataFrame[[column_index]] return all column values (as a vector) 
     ☐ dataFrame["column_name"], dataFrame[column_index] return all column values (as a list) 
     ☐ subset function , planets_df[planets_df$has_rings == TRUE, ] or subset(planets_df, subset = has_rings == TRUE)
     ☐ extending (add column = adding variables and add row = adding observations)
       ☐ Add column
         height <- c(123,143,644, 333)
         people$height <- height
         people[["height"]] <- height
         cbind(people, height)
       ☐ add row
         suba <- data.frame(name="Suba", age="37", child=TRUE, height=180)
         rbind(people, suba) 
     ☐ Sorting
       ☐ sort(people$age), return the ages in a order
       ☐ ranks <- order(people$age)
       ☐ people[rank,] , returns data frame order by age
       ☐ descending order, people[order(people$age, decreasing = TRUE), ]
       ☐ Example
         # The type of Mars: mars_type
          mars_type <- planets_df[4, 2]

          # Entire rotation column: rotation
          rotation <- planets_df[, 4]

          # First three planets: closest_planets_df
          closest_planets_df <- planets_df[c(1,2,3), ]

          # Last three planets: furthest_planets_df
          furthest_planets_df <- planets_df[6:8, 1:5]
       ☐ 
 ☐ Graphics
   ☐ Features
     ☐ Create plots with code
     ☐ Replication and modification easy
     ☐ reproducibility
     ☐ graphics package - ggplot2, ggbis, lattice
       ☐ plot() - generic, different input -> different plots, vector, linear, kernel densities , etc
         ☐ Categorical - plot(countries$continent) - produces bar chart
         ☐ Categorical - plot(countries$continent, countries$religion) - produces stacked bar chart
         ☐ Numerical - plot(countries$population) - index plot
         ☐ Numerical - plot(countries$area, countries$population) - scattered plot
         ☐ Numerical - plot(log(countries$area), log(countries$population)) - scattered plot
       ☐ hist() - histogram, visual reprresentaion of distribution, plot frequency of bins
         ☐ example - hist(movies, breaks = 10)
       ☐ Example:
          # movies is already pre-loaded
          # Create a boxplot of the runtime variable
          boxplot(movies$runtime)

          # Subset the dateframe and plot it entirely
          movies_subset = data.frame(movies$rating, movies$votes, movies$runtime)

          plot(movies_subset)

          # Create a pie chart of the table of counts of the genres
          pie(table(movies$genre))       
     ☐ Customizing Plots
       ☐ arguments -> xlab, ylab, main, type, col
         ☐ xlab, ylab are labels
         ☐ main is the title
         ☐ type = "o" is line and dot , type = "l" is line
         ☐ col = color
       ☐ par() = parameters
         ☐ can modify the par() elements to save session wide changes
       ☐ other parameters
         ☐ col.main = color of the main title
         ☐ cex.axis = font ratio
         ☐ lty = line type 
         ☐ pch = plot symbol
       ☐ Example 1#
          plot(movies$votes, movies$runtime,
               main = "Votes versus Runtime",
               xlab = "Number of votes [-]",
               ylab = "Runtime [s]",
               sub = "No clear correlation")       
       ☐ Example #2
          plot(movies$votes, movies$runtime,
               main = "Votes versus Runtime",
               xlab = "Number of votes [-]",
               ylab = "Runtime [s]",
               sub = "No clear correlation",
               pch = 9,
               col = "#dd2d2d",
               col.main = 604)       
       ☐ Example #3
        plot(
            movies$votes, movies$year,
            main = "Are recent movies voted more on?",
            xlab = "Number of votes [-]", 
            ylab = "Year [-]",
            col = "orange",
            pch = 19,
            cex.axis = 0.8
        )       
       ☐ Example #4
        hist(
            movies$runtime, 
            breaks = 20,
            xlim = c(90, 220),
            main = "Distribution of Runtime",
            xlab = "Runtime [-]",
            col = "cyan",
            border = "red"
        )       


     ☐ Multiple Plots
       ☐ mfrow parameter
         ☐ par(mfrow = c(2,2)) , this is 4 subplots with 2 by 2 grid. 4 plots can be arranged by row wise manner
         ☐ par(mfcol = c(2,2)) , this is 4 subplots with 2 by 2 grid. 4 plots can be arranged by column wise manner
       ☐ layout() function
         ☐ requires a matrix
         ☐ 




